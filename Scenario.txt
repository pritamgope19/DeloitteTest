
Welcome to the Deloitte Web engineering exercise. 

A single-page application (SPA) is a web application or website that interacts with the web browser by 


dynamically rewriting the current web page with new data from the web server, instead of the default 
method of the browser loading entire new pages. The goal is faster transitions that make the website 
feel more like a native app. Web browser JavaScript frameworks and libraries, such as AngularJS, Ember.js, ExtJS, Knockout.js, Meteor.js,
 React and Vue.js have adopted SPA principles.The objective of this problem is to build an SPA without using any JavaScript frameworks We
  perform these 
exercises to get a feel for how you approach challenging problems. 

Introduction: 
You will be building a web application using SASS, Javascript, and NodeJS #The data required for this 
task can be hardcoded on a local api server in JSON format. 
You will be expected to fetch (or AJAX) the data into your web application and manipulate/filter the
 results to display. 
The creative and business analyst teams have provide you with some supporting designs which can be 
found in the `designs` folder. 
Above all, we're not expecting a completed masterpiece. We're looking for your attention to detail, 
semantic goodness, and to see how you tackle different problems. 

Note: Key aspects that will be evaluated will be best practices followed for - Version Control using git,
 eg. Branching, naming conventions, PR descriptions etc - Styling eg. use of preprocessors, mixins, 
 variables. - HTML eg. semantic tags, hierarchy of tags - JS eg. use of ES6 syntax, file/folder structure, separation of concerns etc. SPA
  approach and reasoning for approach 

Good luck! 

Prerequisites: 

You have [Node](h_ttps:/_/nodejs.org/en/) v8 with npm installed 
You are familiar with entering simple [terminal commands](h_ttp://_blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line)
You are familiar with [Git source control](h_ttps:/_/product.hubspot.com/blog/git-and-github-tutorial-for-beginners)
You will require an internet connection to install npm packages 
An editor of your choice (e.g. [Atom](h_ttps:/_/atom.io/), [VSCode](h_ttps:/_/code.visualstudio.com/), 
[Sublime Text](h_ttps:/_/w_ww.sublimetext.com/), [WebStorm](h_ttps:/_/w_ww.jetbrains.com/webstorm/), or your own editor/IDE)

Instructions:

1. Assumption- Please list any assumptions that you have made in order to solve any problems in the free text below. 
2. Read the Getting Started guide below
3. Read the Requirements and start building your application
4. Complete the coding in Github, run it and share your github link in the free text below 

Submission details are down below. 

Getting started We have provided you with a hi-fidelity desktop design file for the app in the attachment. You should make your solution
 match these designs as closely as possible. Unfortunately, the creative team have not provided any mobile designs and look to your expertise
  in making it responsive. 

Requirements - 
In your approach, consider this project exactly as you would a real-world project.
Your solution must be a responsive web application.
Please use SCSS if you would like to use a precompiler for CSS.
Your application must fetch/ajax all data. By default, ALL furniture should be listed.
If at anytime, there is no listing data to display, your application should tell users there are no results.
If your application is ever busy, this should be reflected in the interface (eg a loader in the center of the screen).
Your solution must work in IE11, latest Chrome/Firefox/Safari (including touch devices).
Your solution must be valid, semantic HTML and Accessible to the WCAG 2.0 Level AA standard (good to have)
Consistent code formatting is good. We recommend using a linter for your CSS and JS ex. ESLint 

**Copyright 2020 Deloitte Digital. Intended for Deloitte Digital engineer candidate evaluation only. Please do not publish or share without
 permission** 

https://github.com/pritamgope19/DeloitteTest